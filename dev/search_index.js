var documenterSearchIndex = {"docs":
[{"location":"#IndirectImports.jl-1","page":"Home","title":"IndirectImports.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [IndirectImports]","category":"page"},{"location":"#IndirectImports.@indirect-Tuple{Any}","page":"Home","title":"IndirectImports.@indirect","text":"@indirect import Module=UUID\n\nDefine an indirectly imported Module in a downstream module.\n\n@indirect function Module.interface_function(...) ... end\n\nDefine a method of an indirectly imported function in a downstream module.\n\n@indirect function interface_function end\n\nDeclare an interface_function in the upstream module.  This function can be used and/or extended in downstream packages (via @indirect import Module=UUID) without loading the package defining interface_function.  This works only at the top-level module.\n\nExamples\n\nStep 1: Declare indirect function in an upstream package\n\nThere must be a package that \"declares\" the ownership of an indirect function. Typically, such function is an interface extended by downstream packages.\n\nTo declare a function fun in a package Upstream wrap an empty definition of a function function fun end with @indirect:\n\nmodule Upstream\n    using IndirectImports\n    @indirect function fun end\nend\n\nTo define a method of an indirect function inside Upstream wrap it in @indirect:\n\nmodule Upstream\n    using IndirectImports\n    @indirect function fun end\n\n    @indirect fun() = 0  # defining a method\nend\n\nStep 2: Add method definition in downstream packages\n\nFirst, find out the UUID of Upstream package by\n\njulia> using Upstream\n\njulia> Base.PkgId(Upstream)\nUpstream [332e404b-d707-4859-b48f-328b8b3632c0]\n\nUsing this UUID, the Upstream package can be indirectly imported and methods for the indirect function Upstream.fun can be defined as follows:\n\nmodule Downstream\n    using IndirectImports\n    @indirect import Upstream=\"332e404b-d707-4859-b48f-328b8b3632c0\"\n    @indirect Upstream.fun(x) = x + 1\nend\n\nNote: It looks like defining a method works without @indirect possibly due to a \"bug\" in Julia [1].  While it is handy to define methods without @indirect for debugging, prototyping, etc., it is a good idea to wrap the method definition in @indirect to be forward compatible with future Julia versions.\n\n[1]: Extending a constructor is possible with only using using   https://github.com/JuliaLang/julia/issues/25744\n\n\n\n\n\n","category":"macro"}]
}
